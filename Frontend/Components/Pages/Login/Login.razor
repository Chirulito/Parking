@page "/login"
@layout Layout.Annex.MainLayout
@rendermode InteractiveServer

@inject NavigationManager Navigation
@inject AuthService AuthService
@inject HttpClient Http

<PageTitle>Login</PageTitle>

<div class="main-container">
    <div class="logo-container">
        <img src="Images/Logo.svg" alt="Logo" />
    </div>
    <div class="login-container">
        <div class="information-container">
            <h1>Login</h1>
        </div>

        <div class="input-container">
            <label for="email">Email</label>
            <input id="email" type="text" maxlength="45" @bind="email" />
        </div>

        <div class="input-container">
            <label for="password">Password</label>
            <input id="password" type="password" maxlength="45" @bind="password" />
        </div>

        <button class="login-button" @onclick="Auth">
            <span class="text">Continue</span>
            <span class="arrow">→</span>
        </button>

        <button class="signup-button">Create an account</button>
    </div>
</div>

@code {
    private string email;
    private string password;

    private async Task Auth()
    {
        if (string.IsNullOrWhiteSpace(email) || string.IsNullOrWhiteSpace(password))
        {
            Console.WriteLine("Email and password cannot be empty.");
            email = string.Empty;
            password = string.Empty;
            return;
        }

        var loginData = new
        {
            email = email,
            Password = password
        };

        try
        {
            var response = await Http.PostAsJsonAsync("https://localhost:7141/api/Credential/Login", loginData);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();

                if (result is null)
                {
                    Console.WriteLine("Error: Response is null.");
                    return;
                }

                AuthService.SetUser(result.Id.ToString(), result.Name, result.Roles);

                if (result.MustChangePassword)
                {
                    Navigation.NavigateTo("/change-password");
                    return;
                }

                if (result.Roles.Contains("System"))
                    Navigation.NavigateTo("/support");

                else if (result.Roles.Contains("Security"))
                    Navigation.NavigateTo("/security");

                else if (result.Roles.Contains("Staff"))
                    Navigation.NavigateTo("/staff");

                else if (result.Roles.Contains("Student"))
                    Navigation.NavigateTo("/student");
                else
                    Navigation.NavigateTo("/access-denied");
            }
            else
            {
                Console.WriteLine("Invalid credentials.");
                email = string.Empty;
                password = string.Empty;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private class LoginResponse
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public List<string> Roles { get; set; } = new();
        public bool MustChangePassword { get; set; }
    }
}
